{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../home/travis/build/longseespace/node-test/tmp/broccoli_type_script_compiler-input_base_path-ueMrKXKK.tmp/0/src/app/components/auth/shared/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\n@Injectable()\nexport class AuthService {\n\n  private registerUrl = 'https://polar-sierra-94874.herokuapp.com/users/register';\n  private loginUrl = 'https://polar-sierra-94874.herokuapp.com/users/login';\n  private resetPasswordUrl = 'https://polar-sierra-94874.herokuapp.com/users/resetpassword';\n\n  private extractData(res: Response) {\n    let body = res.json();\n    return body || { };\n  }\n  private persistToken(token: string) {\n    localStorage.setItem('jwtToken', token);\n  }\n  private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Promise.reject(errMsg);\n  }\n\n  constructor (private http: Http) {}\n\n  isAuthenticated() {\n    return localStorage.getItem('jwtToken') && localStorage.getItem('jwtToken').length > 0;\n  }\n\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n\n  logout() {\n    localStorage.removeItem('jwtToken');\n  }\n\n  /**\n   * Look for already registered single user\n   */\n  login(provider, email, password) {\n    return new Promise((resolve, reject) => {\n      /**\n       * This is where you should talk with your API\n       * See the Angular 2 Http Client Documentation for more information\n       * Documentation: https://angular.io/docs/ts/latest/guide/server-communication.html\n       */\n\n      switch (provider) {\n        case 'linkedin' :\n          // `email` now contains token\n          this.persistToken(email);\n          resolve(true);\n        break;\n        default :\n          console.log(email);\n          console.log(password);\n          let body = JSON.stringify({ email, password });\n          let headers = new Headers({ 'Content-Type': 'application/json' });\n          let options = new RequestOptions({ headers: headers });\n          this.http.post(this.loginUrl, body, options)\n            .toPromise()\n            .then(res => {\n              const user = this.extractData(res);\n              this.persistToken(user.token);\n              console.log(user);\n              resolve(true);\n            })\n            .catch(error => {\n              this.handleError(error);\n              resolve(false);\n            });\n        break;\n      }\n\n      // resolve(false); // Must be false in case of failure\n    });\n  }\n\n  /**\n   * Verify if user already exists and register\n   */\n  register(provider, email, password) {\n    return new Promise(resolve => {\n      /**\n       * This is where you should talk with your API\n       * See the Angular 2 Http Client Documentation for more information\n       * Documentation: https://angular.io/docs/ts/latest/guide/server-communication.html\n       */\n\n      switch (provider) {\n        case 'linkedin' :\n          console.log(provider);\n        break;\n        default :\n          console.log(email);\n          console.log(password);\n          let body = JSON.stringify({ email, password });\n          let headers = new Headers({ 'Content-Type': 'application/json' });\n          let options = new RequestOptions({ headers: headers });\n          this.http.post(this.registerUrl, body, options)\n            .toPromise()\n            .then(res => {\n              const user = this.extractData(res);\n              this.persistToken(user.token);\n              console.log(user);\n              resolve(true);\n            })\n            .catch(error => {\n              this.handleError(error);\n              resolve(false);\n            });\n        break;\n      }\n\n      // resolve(true); // Must be false in case of failure\n    });\n  }\n\n  /**\n   * Send email to user\n   */\n  forgotPassword(email) {\n    return new Promise(resolve => {\n      /**\n       * This is where you should talk with your API\n       * See the Angular 2 Http Client Documentation for more information\n       * Documentation: https://angular.io/docs/ts/latest/guide/server-communication.html\n       */\n       let body = JSON.stringify({ email });\n       let headers = new Headers({ 'Content-Type': 'application/json' });\n       let options = new RequestOptions({ headers: headers });\n       this.http.post(this.resetPasswordUrl, body, options)\n         .toPromise()\n         .then(res => {\n           resolve(true);\n         })\n         .catch(error => {\n           this.handleError(error);\n           resolve(false);\n         });\n    });\n  }\n}\n"]}